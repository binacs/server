// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"
	time "time"

	api_cos "github.com/BinacsLee/server/api/cos"
	api_crypto "github.com/BinacsLee/server/api/crypto"
	api_pastebin "github.com/BinacsLee/server/api/pastebin"
	api_tinyurl "github.com/BinacsLee/server/api/tinyurl"
	api_user "github.com/BinacsLee/server/api/user"
	table "github.com/BinacsLee/server/types/table"
	trace "github.com/binacsgo/trace"
	gin "github.com/gin-gonic/gin"
	xorm "github.com/go-xorm/xorm"
	gomock "github.com/golang/mock/gomock"
	runtime "github.com/grpc-ecosystem/grpc-gateway/runtime"
	opentracing "github.com/opentracing/opentracing-go"
	grpc "google.golang.org/grpc"
)

// MockMysqlService is a mock of MysqlService interface.
type MockMysqlService struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlServiceMockRecorder
}

// MockMysqlServiceMockRecorder is the mock recorder for MockMysqlService.
type MockMysqlServiceMockRecorder struct {
	mock *MockMysqlService
}

// NewMockMysqlService creates a new mock instance.
func NewMockMysqlService(ctrl *gomock.Controller) *MockMysqlService {
	mock := &MockMysqlService{ctrl: ctrl}
	mock.recorder = &MockMysqlServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlService) EXPECT() *MockMysqlServiceMockRecorder {
	return m.recorder
}

// GetEngineG mocks base method.
func (m *MockMysqlService) GetEngineG() *xorm.EngineGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngineG")
	ret0, _ := ret[0].(*xorm.EngineGroup)
	return ret0
}

// GetEngineG indicates an expected call of GetEngineG.
func (mr *MockMysqlServiceMockRecorder) GetEngineG() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngineG", reflect.TypeOf((*MockMysqlService)(nil).GetEngineG))
}

// Sync2 mocks base method.
func (m *MockMysqlService) Sync2() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync2")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync2 indicates an expected call of Sync2.
func (mr *MockMysqlServiceMockRecorder) Sync2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync2", reflect.TypeOf((*MockMysqlService)(nil).Sync2))
}

// MockRedisService is a mock of RedisService interface.
type MockRedisService struct {
	ctrl     *gomock.Controller
	recorder *MockRedisServiceMockRecorder
}

// MockRedisServiceMockRecorder is the mock recorder for MockRedisService.
type MockRedisServiceMockRecorder struct {
	mock *MockRedisService
}

// NewMockRedisService creates a new mock instance.
func NewMockRedisService(ctrl *gomock.Controller) *MockRedisService {
	mock := &MockRedisService{ctrl: ctrl}
	mock.recorder = &MockRedisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisService) EXPECT() *MockRedisServiceMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockRedisService) Del(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockRedisServiceMockRecorder) Del(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisService)(nil).Del), arg0)
}

// Get mocks base method.
func (m *MockRedisService) Get(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisService)(nil).Get), arg0)
}

// GetExpireAt mocks base method.
func (m *MockRedisService) GetExpireAt(arg0 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpireAt", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpireAt indicates an expected call of GetExpireAt.
func (mr *MockRedisServiceMockRecorder) GetExpireAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpireAt", reflect.TypeOf((*MockRedisService)(nil).GetExpireAt), arg0)
}

// Ping mocks base method.
func (m *MockRedisService) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisServiceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedisService)(nil).Ping))
}

// Set mocks base method.
func (m *MockRedisService) Set(arg0, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisServiceMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisService)(nil).Set), arg0, arg1, arg2)
}

// MockCryptoService is a mock of CryptoService interface.
type MockCryptoService struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoServiceMockRecorder
}

// MockCryptoServiceMockRecorder is the mock recorder for MockCryptoService.
type MockCryptoServiceMockRecorder struct {
	mock *MockCryptoService
}

// NewMockCryptoService creates a new mock instance.
func NewMockCryptoService(ctrl *gomock.Controller) *MockCryptoService {
	mock := &MockCryptoService{ctrl: ctrl}
	mock.recorder = &MockCryptoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoService) EXPECT() *MockCryptoServiceMockRecorder {
	return m.recorder
}

// CryptoDecrypt mocks base method.
func (m *MockCryptoService) CryptoDecrypt(ctx context.Context, req *api_crypto.CryptoDecryptReq) (*api_crypto.CryptoDecryptResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CryptoDecrypt", ctx, req)
	ret0, _ := ret[0].(*api_crypto.CryptoDecryptResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoDecrypt indicates an expected call of CryptoDecrypt.
func (mr *MockCryptoServiceMockRecorder) CryptoDecrypt(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoDecrypt", reflect.TypeOf((*MockCryptoService)(nil).CryptoDecrypt), ctx, req)
}

// CryptoEncrypt mocks base method.
func (m *MockCryptoService) CryptoEncrypt(ctx context.Context, req *api_crypto.CryptoEncryptReq) (*api_crypto.CryptoEncryptResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CryptoEncrypt", ctx, req)
	ret0, _ := ret[0].(*api_crypto.CryptoEncryptResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoEncrypt indicates an expected call of CryptoEncrypt.
func (mr *MockCryptoServiceMockRecorder) CryptoEncrypt(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoEncrypt", reflect.TypeOf((*MockCryptoService)(nil).CryptoEncrypt), ctx, req)
}

// Register mocks base method.
func (m *MockCryptoService) Register(ctx context.Context, gsrv *grpc.Server, gwmux *runtime.ServeMux, opts []grpc.DialOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, gsrv, gwmux, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockCryptoServiceMockRecorder) Register(ctx, gsrv, gwmux, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCryptoService)(nil).Register), ctx, gsrv, gwmux, opts)
}

// MockPastebinService is a mock of PastebinService interface.
type MockPastebinService struct {
	ctrl     *gomock.Controller
	recorder *MockPastebinServiceMockRecorder
}

// MockPastebinServiceMockRecorder is the mock recorder for MockPastebinService.
type MockPastebinServiceMockRecorder struct {
	mock *MockPastebinService
}

// NewMockPastebinService creates a new mock instance.
func NewMockPastebinService(ctrl *gomock.Controller) *MockPastebinService {
	mock := &MockPastebinService{ctrl: ctrl}
	mock.recorder = &MockPastebinServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPastebinService) EXPECT() *MockPastebinServiceMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockPastebinService) Parse(content, syntax string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", content, syntax)
	ret0, _ := ret[0].(string)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockPastebinServiceMockRecorder) Parse(content, syntax interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockPastebinService)(nil).Parse), content, syntax)
}

// PastebinSubmit mocks base method.
func (m *MockPastebinService) PastebinSubmit(ctx context.Context, req *api_pastebin.PastebinSubmitReq) (*api_pastebin.PastebinSubmitResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PastebinSubmit", ctx, req)
	ret0, _ := ret[0].(*api_pastebin.PastebinSubmitResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PastebinSubmit indicates an expected call of PastebinSubmit.
func (mr *MockPastebinServiceMockRecorder) PastebinSubmit(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PastebinSubmit", reflect.TypeOf((*MockPastebinService)(nil).PastebinSubmit), ctx, req)
}

// RecentPosts mocks base method.
func (m *MockPastebinService) RecentPosts() ([]table.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecentPosts")
	ret0, _ := ret[0].([]table.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentPosts indicates an expected call of RecentPosts.
func (mr *MockPastebinServiceMockRecorder) RecentPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentPosts", reflect.TypeOf((*MockPastebinService)(nil).RecentPosts))
}

// Register mocks base method.
func (m *MockPastebinService) Register(ctx context.Context, gsrv *grpc.Server, gwmux *runtime.ServeMux, opts []grpc.DialOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, gsrv, gwmux, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockPastebinServiceMockRecorder) Register(ctx, gsrv, gwmux, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPastebinService)(nil).Register), ctx, gsrv, gwmux, opts)
}

// URLSearch mocks base method.
func (m *MockPastebinService) URLSearch(turl string) (*table.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLSearch", turl)
	ret0, _ := ret[0].(*table.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLSearch indicates an expected call of URLSearch.
func (mr *MockPastebinServiceMockRecorder) URLSearch(turl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLSearch", reflect.TypeOf((*MockPastebinService)(nil).URLSearch), turl)
}

// MockTinyURLService is a mock of TinyURLService interface.
type MockTinyURLService struct {
	ctrl     *gomock.Controller
	recorder *MockTinyURLServiceMockRecorder
}

// MockTinyURLServiceMockRecorder is the mock recorder for MockTinyURLService.
type MockTinyURLServiceMockRecorder struct {
	mock *MockTinyURLService
}

// NewMockTinyURLService creates a new mock instance.
func NewMockTinyURLService(ctrl *gomock.Controller) *MockTinyURLService {
	mock := &MockTinyURLService{ctrl: ctrl}
	mock.recorder = &MockTinyURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTinyURLService) EXPECT() *MockTinyURLServiceMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockTinyURLService) Encode(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockTinyURLServiceMockRecorder) Encode(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockTinyURLService)(nil).Encode), url)
}

// Register mocks base method.
func (m *MockTinyURLService) Register(ctx context.Context, gsrv *grpc.Server, gwmux *runtime.ServeMux, opts []grpc.DialOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, gsrv, gwmux, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockTinyURLServiceMockRecorder) Register(ctx, gsrv, gwmux, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTinyURLService)(nil).Register), ctx, gsrv, gwmux, opts)
}

// TinyURLDecode mocks base method.
func (m *MockTinyURLService) TinyURLDecode(ctx context.Context, req *api_tinyurl.TinyURLDecodeReq) (*api_tinyurl.TinyURLDecodeResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TinyURLDecode", ctx, req)
	ret0, _ := ret[0].(*api_tinyurl.TinyURLDecodeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TinyURLDecode indicates an expected call of TinyURLDecode.
func (mr *MockTinyURLServiceMockRecorder) TinyURLDecode(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TinyURLDecode", reflect.TypeOf((*MockTinyURLService)(nil).TinyURLDecode), ctx, req)
}

// TinyURLEncode mocks base method.
func (m *MockTinyURLService) TinyURLEncode(ctx context.Context, req *api_tinyurl.TinyURLEncodeReq) (*api_tinyurl.TinyURLEncodeResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TinyURLEncode", ctx, req)
	ret0, _ := ret[0].(*api_tinyurl.TinyURLEncodeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TinyURLEncode indicates an expected call of TinyURLEncode.
func (mr *MockTinyURLServiceMockRecorder) TinyURLEncode(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TinyURLEncode", reflect.TypeOf((*MockTinyURLService)(nil).TinyURLEncode), ctx, req)
}

// URLSearch mocks base method.
func (m *MockTinyURLService) URLSearch(turl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLSearch", turl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLSearch indicates an expected call of URLSearch.
func (mr *MockTinyURLServiceMockRecorder) URLSearch(turl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLSearch", reflect.TypeOf((*MockTinyURLService)(nil).URLSearch), turl)
}

// MockCosService is a mock of CosService interface.
type MockCosService struct {
	ctrl     *gomock.Controller
	recorder *MockCosServiceMockRecorder
}

// MockCosServiceMockRecorder is the mock recorder for MockCosService.
type MockCosServiceMockRecorder struct {
	mock *MockCosService
}

// NewMockCosService creates a new mock instance.
func NewMockCosService(ctrl *gomock.Controller) *MockCosService {
	mock := &MockCosService{ctrl: ctrl}
	mock.recorder = &MockCosServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCosService) EXPECT() *MockCosServiceMockRecorder {
	return m.recorder
}

// CosBucketURL mocks base method.
func (m *MockCosService) CosBucketURL(ctx context.Context, req *api_cos.CosBucketURLReq) (*api_cos.CosBucketURLResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CosBucketURL", ctx, req)
	ret0, _ := ret[0].(*api_cos.CosBucketURLResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CosBucketURL indicates an expected call of CosBucketURL.
func (mr *MockCosServiceMockRecorder) CosBucketURL(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CosBucketURL", reflect.TypeOf((*MockCosService)(nil).CosBucketURL), ctx, req)
}

// CosGet mocks base method.
func (m *MockCosService) CosGet(ctx context.Context, req *api_cos.CosGetReq) (*api_cos.CosGetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CosGet", ctx, req)
	ret0, _ := ret[0].(*api_cos.CosGetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CosGet indicates an expected call of CosGet.
func (mr *MockCosServiceMockRecorder) CosGet(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CosGet", reflect.TypeOf((*MockCosService)(nil).CosGet), ctx, req)
}

// CosPut mocks base method.
func (m *MockCosService) CosPut(ctx context.Context, req *api_cos.CosPutReq) (*api_cos.CosPutResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CosPut", ctx, req)
	ret0, _ := ret[0].(*api_cos.CosPutResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CosPut indicates an expected call of CosPut.
func (mr *MockCosServiceMockRecorder) CosPut(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CosPut", reflect.TypeOf((*MockCosService)(nil).CosPut), ctx, req)
}

// Register mocks base method.
func (m *MockCosService) Register(ctx context.Context, gsrv *grpc.Server, gwmux *runtime.ServeMux, opts []grpc.DialOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, gsrv, gwmux, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockCosServiceMockRecorder) Register(ctx, gsrv, gwmux, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCosService)(nil).Register), ctx, gsrv, gwmux, opts)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, gsrv *grpc.Server, gwmux *runtime.ServeMux, opts []grpc.DialOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, gsrv, gwmux, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, gsrv, gwmux, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, gsrv, gwmux, opts)
}

// UserAuth mocks base method.
func (m *MockUserService) UserAuth(ctx context.Context, req *api_user.UserAuthReq) (*api_user.UserAuthResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAuth", ctx, req)
	ret0, _ := ret[0].(*api_user.UserAuthResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAuth indicates an expected call of UserAuth.
func (mr *MockUserServiceMockRecorder) UserAuth(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAuth", reflect.TypeOf((*MockUserService)(nil).UserAuth), ctx, req)
}

// UserInfo mocks base method.
func (m *MockUserService) UserInfo(ctx context.Context, req *api_user.UserInfoReq) (*api_user.UserInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", ctx, req)
	ret0, _ := ret[0].(*api_user.UserInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInfo indicates an expected call of UserInfo.
func (mr *MockUserServiceMockRecorder) UserInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockUserService)(nil).UserInfo), ctx, req)
}

// UserRefresh mocks base method.
func (m *MockUserService) UserRefresh(ctx context.Context, req *api_user.UserRefreshReq) (*api_user.UserRefreshResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRefresh", ctx, req)
	ret0, _ := ret[0].(*api_user.UserRefreshResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRefresh indicates an expected call of UserRefresh.
func (mr *MockUserServiceMockRecorder) UserRefresh(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRefresh", reflect.TypeOf((*MockUserService)(nil).UserRefresh), ctx, req)
}

// UserRegister mocks base method.
func (m *MockUserService) UserRegister(ctx context.Context, req *api_user.UserRegisterReq) (*api_user.UserRegisterResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, req)
	ret0, _ := ret[0].(*api_user.UserRegisterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockUserServiceMockRecorder) UserRegister(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockUserService)(nil).UserRegister), ctx, req)
}

// UserTest mocks base method.
func (m *MockUserService) UserTest(ctx context.Context, req *api_user.UserTestReq) (*api_user.UserTestResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTest", ctx, req)
	ret0, _ := ret[0].(*api_user.UserTestResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTest indicates an expected call of UserTest.
func (mr *MockUserServiceMockRecorder) UserTest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTest", reflect.TypeOf((*MockUserService)(nil).UserTest), ctx, req)
}

// MockTraceService is a mock of TraceService interface.
type MockTraceService struct {
	ctrl     *gomock.Controller
	recorder *MockTraceServiceMockRecorder
}

// MockTraceServiceMockRecorder is the mock recorder for MockTraceService.
type MockTraceServiceMockRecorder struct {
	mock *MockTraceService
}

// NewMockTraceService creates a new mock instance.
func NewMockTraceService(ctrl *gomock.Controller) *MockTraceService {
	mock := &MockTraceService{ctrl: ctrl}
	mock.recorder = &MockTraceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceService) EXPECT() *MockTraceServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTraceService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTraceServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTraceService)(nil).Close))
}

// Extract mocks base method.
func (m *MockTraceService) Extract(format, carrier interface{}) (opentracing.SpanContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", format, carrier)
	ret0, _ := ret[0].(opentracing.SpanContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockTraceServiceMockRecorder) Extract(format, carrier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTraceService)(nil).Extract), format, carrier)
}

// FromGinContext mocks base method.
func (m *MockTraceService) FromGinContext(c *gin.Context, serviceName string) opentracing.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromGinContext", c, serviceName)
	ret0, _ := ret[0].(opentracing.Span)
	return ret0
}

// FromGinContext indicates an expected call of FromGinContext.
func (mr *MockTraceServiceMockRecorder) FromGinContext(c, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromGinContext", reflect.TypeOf((*MockTraceService)(nil).FromGinContext), c, serviceName)
}

// GetTracer mocks base method.
func (m *MockTraceService) GetTracer() trace.Trace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracer")
	ret0, _ := ret[0].(trace.Trace)
	return ret0
}

// GetTracer indicates an expected call of GetTracer.
func (mr *MockTraceServiceMockRecorder) GetTracer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracer", reflect.TypeOf((*MockTraceService)(nil).GetTracer))
}

// Inject mocks base method.
func (m *MockTraceService) Inject(sm opentracing.SpanContext, format, carrier interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inject", sm, format, carrier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inject indicates an expected call of Inject.
func (mr *MockTraceServiceMockRecorder) Inject(sm, format, carrier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockTraceService)(nil).Inject), sm, format, carrier)
}

// StartSpan mocks base method.
func (m *MockTraceService) StartSpan(operationName string) opentracing.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpan", operationName)
	ret0, _ := ret[0].(opentracing.Span)
	return ret0
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockTraceServiceMockRecorder) StartSpan(operationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockTraceService)(nil).StartSpan), operationName)
}

// MockBasicService is a mock of BasicService interface.
type MockBasicService struct {
	ctrl     *gomock.Controller
	recorder *MockBasicServiceMockRecorder
}

// MockBasicServiceMockRecorder is the mock recorder for MockBasicService.
type MockBasicServiceMockRecorder struct {
	mock *MockBasicService
}

// NewMockBasicService creates a new mock instance.
func NewMockBasicService(ctrl *gomock.Controller) *MockBasicService {
	mock := &MockBasicService{ctrl: ctrl}
	mock.recorder = &MockBasicServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicService) EXPECT() *MockBasicServiceMockRecorder {
	return m.recorder
}

// ServeAbout mocks base method.
func (m *MockBasicService) ServeAbout() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeAbout")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServeAbout indicates an expected call of ServeAbout.
func (mr *MockBasicServiceMockRecorder) ServeAbout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeAbout", reflect.TypeOf((*MockBasicService)(nil).ServeAbout))
}

// ServeCrypto mocks base method.
func (m *MockBasicService) ServeCrypto() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeCrypto")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServeCrypto indicates an expected call of ServeCrypto.
func (mr *MockBasicServiceMockRecorder) ServeCrypto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeCrypto", reflect.TypeOf((*MockBasicService)(nil).ServeCrypto))
}

// ServeHome mocks base method.
func (m *MockBasicService) ServeHome() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeHome")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServeHome indicates an expected call of ServeHome.
func (mr *MockBasicServiceMockRecorder) ServeHome() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHome", reflect.TypeOf((*MockBasicService)(nil).ServeHome))
}

// ServePastebin mocks base method.
func (m *MockBasicService) ServePastebin() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServePastebin")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServePastebin indicates an expected call of ServePastebin.
func (mr *MockBasicServiceMockRecorder) ServePastebin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServePastebin", reflect.TypeOf((*MockBasicService)(nil).ServePastebin))
}

// ServeStorage mocks base method.
func (m *MockBasicService) ServeStorage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeStorage")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServeStorage indicates an expected call of ServeStorage.
func (mr *MockBasicServiceMockRecorder) ServeStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeStorage", reflect.TypeOf((*MockBasicService)(nil).ServeStorage))
}

// ServeTinyURL mocks base method.
func (m *MockBasicService) ServeTinyURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeTinyURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServeTinyURL indicates an expected call of ServeTinyURL.
func (mr *MockBasicServiceMockRecorder) ServeTinyURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeTinyURL", reflect.TypeOf((*MockBasicService)(nil).ServeTinyURL))
}

// ServeToys mocks base method.
func (m *MockBasicService) ServeToys() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeToys")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServeToys indicates an expected call of ServeToys.
func (mr *MockBasicServiceMockRecorder) ServeToys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeToys", reflect.TypeOf((*MockBasicService)(nil).ServeToys))
}
