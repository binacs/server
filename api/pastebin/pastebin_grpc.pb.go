// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pastebin.proto

package api_pastebin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pastebin_PastebinSubmit_FullMethodName = "/Pastebin/PastebinSubmit"
)

// PastebinClient is the client API for Pastebin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PastebinClient interface {
	PastebinSubmit(ctx context.Context, in *PastebinSubmitReq, opts ...grpc.CallOption) (*PastebinSubmitResp, error)
}

type pastebinClient struct {
	cc grpc.ClientConnInterface
}

func NewPastebinClient(cc grpc.ClientConnInterface) PastebinClient {
	return &pastebinClient{cc}
}

func (c *pastebinClient) PastebinSubmit(ctx context.Context, in *PastebinSubmitReq, opts ...grpc.CallOption) (*PastebinSubmitResp, error) {
	out := new(PastebinSubmitResp)
	err := c.cc.Invoke(ctx, Pastebin_PastebinSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PastebinServer is the server API for Pastebin service.
// All implementations should embed UnimplementedPastebinServer
// for forward compatibility
type PastebinServer interface {
	PastebinSubmit(context.Context, *PastebinSubmitReq) (*PastebinSubmitResp, error)
}

// UnimplementedPastebinServer should be embedded to have forward compatible implementations.
type UnimplementedPastebinServer struct {
}

func (UnimplementedPastebinServer) PastebinSubmit(context.Context, *PastebinSubmitReq) (*PastebinSubmitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PastebinSubmit not implemented")
}

// UnsafePastebinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PastebinServer will
// result in compilation errors.
type UnsafePastebinServer interface {
	mustEmbedUnimplementedPastebinServer()
}

func RegisterPastebinServer(s grpc.ServiceRegistrar, srv PastebinServer) {
	s.RegisterService(&Pastebin_ServiceDesc, srv)
}

func _Pastebin_PastebinSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PastebinSubmitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServer).PastebinSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pastebin_PastebinSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServer).PastebinSubmit(ctx, req.(*PastebinSubmitReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pastebin_ServiceDesc is the grpc.ServiceDesc for Pastebin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pastebin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Pastebin",
	HandlerType: (*PastebinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PastebinSubmit",
			Handler:    _Pastebin_PastebinSubmit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pastebin.proto",
}
