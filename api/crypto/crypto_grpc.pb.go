// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: crypto.proto

package api_crypto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Crypto_CryptoEncrypt_FullMethodName = "/Crypto/CryptoEncrypt"
	Crypto_CryptoDecrypt_FullMethodName = "/Crypto/CryptoDecrypt"
)

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoClient interface {
	CryptoEncrypt(ctx context.Context, in *CryptoEncryptReq, opts ...grpc.CallOption) (*CryptoEncryptResp, error)
	CryptoDecrypt(ctx context.Context, in *CryptoDecryptReq, opts ...grpc.CallOption) (*CryptoDecryptResp, error)
}

type cryptoClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoClient(cc grpc.ClientConnInterface) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) CryptoEncrypt(ctx context.Context, in *CryptoEncryptReq, opts ...grpc.CallOption) (*CryptoEncryptResp, error) {
	out := new(CryptoEncryptResp)
	err := c.cc.Invoke(ctx, Crypto_CryptoEncrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) CryptoDecrypt(ctx context.Context, in *CryptoDecryptReq, opts ...grpc.CallOption) (*CryptoDecryptResp, error) {
	out := new(CryptoDecryptResp)
	err := c.cc.Invoke(ctx, Crypto_CryptoDecrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
// All implementations should embed UnimplementedCryptoServer
// for forward compatibility
type CryptoServer interface {
	CryptoEncrypt(context.Context, *CryptoEncryptReq) (*CryptoEncryptResp, error)
	CryptoDecrypt(context.Context, *CryptoDecryptReq) (*CryptoDecryptResp, error)
}

// UnimplementedCryptoServer should be embedded to have forward compatible implementations.
type UnimplementedCryptoServer struct {
}

func (UnimplementedCryptoServer) CryptoEncrypt(context.Context, *CryptoEncryptReq) (*CryptoEncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptoEncrypt not implemented")
}
func (UnimplementedCryptoServer) CryptoDecrypt(context.Context, *CryptoDecryptReq) (*CryptoDecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptoDecrypt not implemented")
}

// UnsafeCryptoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoServer will
// result in compilation errors.
type UnsafeCryptoServer interface {
	mustEmbedUnimplementedCryptoServer()
}

func RegisterCryptoServer(s grpc.ServiceRegistrar, srv CryptoServer) {
	s.RegisterService(&Crypto_ServiceDesc, srv)
}

func _Crypto_CryptoEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoEncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).CryptoEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crypto_CryptoEncrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).CryptoEncrypt(ctx, req.(*CryptoEncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_CryptoDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoDecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).CryptoDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crypto_CryptoDecrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).CryptoDecrypt(ctx, req.(*CryptoDecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Crypto_ServiceDesc is the grpc.ServiceDesc for Crypto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crypto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CryptoEncrypt",
			Handler:    _Crypto_CryptoEncrypt_Handler,
		},
		{
			MethodName: "CryptoDecrypt",
			Handler:    _Crypto_CryptoDecrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto.proto",
}
