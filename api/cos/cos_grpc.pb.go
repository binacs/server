// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cos.proto

package api_cos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cos_CosBucketURL_FullMethodName = "/Cos/CosBucketURL"
	Cos_CosPut_FullMethodName       = "/Cos/CosPut"
	Cos_CosGet_FullMethodName       = "/Cos/CosGet"
)

// CosClient is the client API for Cos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosClient interface {
	CosBucketURL(ctx context.Context, in *CosBucketURLReq, opts ...grpc.CallOption) (*CosBucketURLResp, error)
	CosPut(ctx context.Context, in *CosPutReq, opts ...grpc.CallOption) (*CosPutResp, error)
	CosGet(ctx context.Context, in *CosGetReq, opts ...grpc.CallOption) (*CosGetResp, error)
}

type cosClient struct {
	cc grpc.ClientConnInterface
}

func NewCosClient(cc grpc.ClientConnInterface) CosClient {
	return &cosClient{cc}
}

func (c *cosClient) CosBucketURL(ctx context.Context, in *CosBucketURLReq, opts ...grpc.CallOption) (*CosBucketURLResp, error) {
	out := new(CosBucketURLResp)
	err := c.cc.Invoke(ctx, Cos_CosBucketURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosClient) CosPut(ctx context.Context, in *CosPutReq, opts ...grpc.CallOption) (*CosPutResp, error) {
	out := new(CosPutResp)
	err := c.cc.Invoke(ctx, Cos_CosPut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosClient) CosGet(ctx context.Context, in *CosGetReq, opts ...grpc.CallOption) (*CosGetResp, error) {
	out := new(CosGetResp)
	err := c.cc.Invoke(ctx, Cos_CosGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosServer is the server API for Cos service.
// All implementations should embed UnimplementedCosServer
// for forward compatibility
type CosServer interface {
	CosBucketURL(context.Context, *CosBucketURLReq) (*CosBucketURLResp, error)
	CosPut(context.Context, *CosPutReq) (*CosPutResp, error)
	CosGet(context.Context, *CosGetReq) (*CosGetResp, error)
}

// UnimplementedCosServer should be embedded to have forward compatible implementations.
type UnimplementedCosServer struct {
}

func (UnimplementedCosServer) CosBucketURL(context.Context, *CosBucketURLReq) (*CosBucketURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CosBucketURL not implemented")
}
func (UnimplementedCosServer) CosPut(context.Context, *CosPutReq) (*CosPutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CosPut not implemented")
}
func (UnimplementedCosServer) CosGet(context.Context, *CosGetReq) (*CosGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CosGet not implemented")
}

// UnsafeCosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosServer will
// result in compilation errors.
type UnsafeCosServer interface {
	mustEmbedUnimplementedCosServer()
}

func RegisterCosServer(s grpc.ServiceRegistrar, srv CosServer) {
	s.RegisterService(&Cos_ServiceDesc, srv)
}

func _Cos_CosBucketURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosBucketURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosServer).CosBucketURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cos_CosBucketURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosServer).CosBucketURL(ctx, req.(*CosBucketURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cos_CosPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosServer).CosPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cos_CosPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosServer).CosPut(ctx, req.(*CosPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cos_CosGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosServer).CosGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cos_CosGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosServer).CosGet(ctx, req.(*CosGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cos_ServiceDesc is the grpc.ServiceDesc for Cos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cos",
	HandlerType: (*CosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CosBucketURL",
			Handler:    _Cos_CosBucketURL_Handler,
		},
		{
			MethodName: "CosPut",
			Handler:    _Cos_CosPut_Handler,
		},
		{
			MethodName: "CosGet",
			Handler:    _Cos_CosGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cos.proto",
}
