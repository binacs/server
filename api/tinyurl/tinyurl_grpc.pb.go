// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: tinyurl.proto

package api_tinyurl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TinyURL_TinyURLEncode_FullMethodName = "/TinyURL/TinyURLEncode"
	TinyURL_TinyURLDecode_FullMethodName = "/TinyURL/TinyURLDecode"
)

// TinyURLClient is the client API for TinyURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyURLClient interface {
	TinyURLEncode(ctx context.Context, in *TinyURLEncodeReq, opts ...grpc.CallOption) (*TinyURLEncodeResp, error)
	TinyURLDecode(ctx context.Context, in *TinyURLDecodeReq, opts ...grpc.CallOption) (*TinyURLDecodeResp, error)
}

type tinyURLClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyURLClient(cc grpc.ClientConnInterface) TinyURLClient {
	return &tinyURLClient{cc}
}

func (c *tinyURLClient) TinyURLEncode(ctx context.Context, in *TinyURLEncodeReq, opts ...grpc.CallOption) (*TinyURLEncodeResp, error) {
	out := new(TinyURLEncodeResp)
	err := c.cc.Invoke(ctx, TinyURL_TinyURLEncode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyURLClient) TinyURLDecode(ctx context.Context, in *TinyURLDecodeReq, opts ...grpc.CallOption) (*TinyURLDecodeResp, error) {
	out := new(TinyURLDecodeResp)
	err := c.cc.Invoke(ctx, TinyURL_TinyURLDecode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyURLServer is the server API for TinyURL service.
// All implementations should embed UnimplementedTinyURLServer
// for forward compatibility
type TinyURLServer interface {
	TinyURLEncode(context.Context, *TinyURLEncodeReq) (*TinyURLEncodeResp, error)
	TinyURLDecode(context.Context, *TinyURLDecodeReq) (*TinyURLDecodeResp, error)
}

// UnimplementedTinyURLServer should be embedded to have forward compatible implementations.
type UnimplementedTinyURLServer struct {
}

func (UnimplementedTinyURLServer) TinyURLEncode(context.Context, *TinyURLEncodeReq) (*TinyURLEncodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TinyURLEncode not implemented")
}
func (UnimplementedTinyURLServer) TinyURLDecode(context.Context, *TinyURLDecodeReq) (*TinyURLDecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TinyURLDecode not implemented")
}

// UnsafeTinyURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyURLServer will
// result in compilation errors.
type UnsafeTinyURLServer interface {
	mustEmbedUnimplementedTinyURLServer()
}

func RegisterTinyURLServer(s grpc.ServiceRegistrar, srv TinyURLServer) {
	s.RegisterService(&TinyURL_ServiceDesc, srv)
}

func _TinyURL_TinyURLEncode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TinyURLEncodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyURLServer).TinyURLEncode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyURL_TinyURLEncode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyURLServer).TinyURLEncode(ctx, req.(*TinyURLEncodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyURL_TinyURLDecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TinyURLDecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyURLServer).TinyURLDecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyURL_TinyURLDecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyURLServer).TinyURLDecode(ctx, req.(*TinyURLDecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyURL_ServiceDesc is the grpc.ServiceDesc for TinyURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TinyURL",
	HandlerType: (*TinyURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TinyURLEncode",
			Handler:    _TinyURL_TinyURLEncode_Handler,
		},
		{
			MethodName: "TinyURLDecode",
			Handler:    _TinyURL_TinyURLDecode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tinyurl.proto",
}
